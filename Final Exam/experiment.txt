class Family(object):
    def __init__(self, founder):
        """ 
        Initialize with string of name of oldest ancestor

        Keyword arguments:
        founder -- string of name of oldest ancestor
        """

        self.names_to_nodes = {}
        self.root = Member(founder)    
        self.names_to_nodes[founder] = self.root   

    def set_children(self, mother, list_of_children):
        """
        Set all children of the mother. 

        Keyword arguments: 
        mother -- mother's name as a string
        list_of_children -- children names as strings
        """
        # convert name to Member node (should check for validity)
        mom_node = self.names_to_nodes[mother]   
        # add each child
        for c in list_of_children:           
            # create Member node for a child   
            c_member = Member(c)               
            # remember its name to node mapping
            self.names_to_nodes[c] = c_member    
            # set child's parent
            c_member.add_parent(mom_node)        
            # set the parent's child
            mom_node.add_child(c_member)         
    
    def is_parent(self, mother, kid):
        """
        Returns True or False whether mother is parent of kid. 

        Keyword arguments: 
        mother -- string of mother's name
        kid -- string of kid's name
        """
        mom_node = self.names_to_nodes[mother]
        child_node = self.names_to_nodes[kid]
        return child_node.is_parent(mom_node)   

    def is_child(self, kid, mother):
        """
        Returns True or False whether kid is child of mother. 

        Keyword arguments: 
        kid -- string of kid's name
        mother -- string of mother's name
        """        
        mom_node = self.names_to_nodes[mother]   
        child_node = self.names_to_nodes[kid]
        return mom_node.is_child(child_node)

    def cousin(self, a, b):
        """
        Returns a tuple of (the cousin type, degree removed) 

        Keyword arguments: 
        a -- string that is the name of node a
        b -- string that is the name of node b

        cousin type:
          -1 if a and b are the same node.
          -1 if either one is a direct descendant of the other
          >=0 otherwise, it calculates the distance from 
          each node to the common ancestor.  Then cousin type is 
          set to the smaller of the two distances, as described 
          in the exercises above

        degrees removed:
          >= 0
          The absolute value of the difference between the 
          distance from each node to their common ancestor.
        """
        
        ## YOUR CODE HERE ####
        i=0
        common_ancestor=''
        cousin=0
        way_a=0
        way_b=0
        if a==b or (self.is_child(a, b)==True or self.is_child(b, a)==True):
            cousin=-1
        else:
            # codes for finding common_ancestor
            k=''
            l=''
            a=k
            b=l
            for e in range(10):
                for e in range(10):
                    if k!=l:
                        if l!=self.root:
                            l=Member(l).get_parent()
                        else:
                            break
                    else:
                        common_ancestor=k
                        i=1
                        break
                k=Member(k).get_parent()
                if i==1:
                    break
            m=''
            a=m
            for e in range(10):
                if m==common_ancestor:
                    break
                else:
                    m=Member(m).get_parent()
                    way_a+=1
            n=''
            b=n
            for e in range(10):
                if n==common_ancestor:
                    break
                else:
                    n=Member(n).get_parent()
                
            if way_a<way_b:
                cousin=way_a
            else:
                cousin=way_b

        # codes for degree_removed
        degree_removed=abs(way_a-way_b)
            
        return (cousin, degree_removed)